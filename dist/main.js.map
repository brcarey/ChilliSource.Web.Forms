{"version":3,"file":"main.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 0c25199e8aaa2b7dc7cf","webpack:///external {\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\",\"root\":\"React\"}","webpack:///external {\"commonjs\":\"classnames\",\"commonjs2\":\"classnames\",\"amd\":\"classnames\",\"root\":\"classnames\"}","webpack:///external {\"commonjs\":\"immutable\",\"commonjs2\":\"immutable\",\"amd\":\"immutable\",\"root\":\"Immutable\"}","webpack:///src/Form/Helpers/performanceWrapper.ts","webpack:///src/Form/Helpers/inputHelpers.ts","webpack:///external {\"commonjs\":\"lodash\",\"commonjs2\":\"lodash\",\"amd\":\"lodash\",\"root\":\"_\"}","webpack:///external {\"commonjs\":\"recompose\",\"commonjs2\":\"recompose\",\"amd\":\"recompose\",\"root\":\"Recompose\"}","webpack:///src/Form/InputWrapper.tsx","webpack:///src/Validation/DisplayValidation.tsx","webpack:///src/Form/InputGroup.tsx","webpack:///libs/validate.ts","webpack:///src/Form/Actions/fields.ts","webpack:///src/Form/ErrorWrapper.tsx","webpack:///external {\"commonjs\":\"prop-types\",\"commonjs2\":\"prop-types\",\"amd\":\"prop-types\",\"root\":\"prop-types\"}","webpack:///src/Form/Helpers/formHelpers.ts","webpack:///src/Form/Reducers/index.ts","webpack:///src/Input/Input.tsx","webpack:///src/Radio/Radio.tsx","webpack:///src/Validation/Validation.tsx","webpack:///src/DatePicker/DateWrapper.tsx","webpack:///src/Form/Helpers/createSpecificShallowEqual.ts","webpack:///src/Switch/Switch.tsx","webpack:///./src/DatePicker/DateRange.scss","webpack:///external {\"commonjs\":\"moment\",\"commonjs2\":\"moment\",\"amd\":\"moment\",\"root\":\"Moment\"}","webpack:///external {\"commonjs\":\"react-date-range\",\"commonjs2\":\"react-date-range\",\"amd\":\"react-date-range\",\"root\":\"ReactDateRange\"}","webpack:///src/CheckBox/CheckBox.tsx","webpack:///src/DatePicker/DatePicker.tsx","webpack:///src/DatePicker/DateRange.tsx","webpack:///src/DropZone/DropZone.tsx","webpack:///src/Form/Fieldset.tsx","webpack:///src/Form/Form.tsx","webpack:///src/Number/Number.tsx","webpack:///src/Radio/RadioTab.tsx","webpack:///src/Radio/RadioTabs.tsx","webpack:///src/Select/Select.tsx","webpack:///src/TextArea/TextArea.tsx","webpack:///src/Validation/Validate.tsx","webpack:///app/index.ts","webpack:///libs/validationRegExps.ts","webpack:///src/Form/Helpers/path.ts","webpack:///src/Input/Base.tsx","webpack:///src/Select/Base.tsx","webpack:///src/Switch/Base.tsx","webpack:///src/TextArea/Base.tsx","webpack:///./src/DropZone/DropZone.scss","webpack:///./src/Form/InputGroup.scss","webpack:///./src/Form/InputWrapper.scss","webpack:///./src/Radio/RadioTabs.scss","webpack:///./src/Select/Select.scss","webpack:///./src/Switch/Switch.scss","webpack:///./src/Validation/Validation.scss","webpack:///external {\"commonjs\":\"react-dropzone\",\"commonjs2\":\"react-dropzone\",\"amd\":\"react-dropzone\",\"root\":\"ReactDropzone\"}","webpack:///external {\"commonjs\":\"react-onclickoutside\",\"commonjs2\":\"react-onclickoutside\",\"amd\":\"react-onclickoutside\",\"root\":\"ReactOnclickoutside\"}"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"classnames\"), require(\"immutable\"), require(\"lodash\"), require(\"recompose\"), require(\"prop-types\"), require(\"moment\"), require(\"react-date-range\"), require(\"react-dropzone\"), require(\"react-onclickoutside\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"classnames\", \"immutable\", \"lodash\", \"recompose\", \"prop-types\", \"moment\", \"react-date-range\", \"react-dropzone\", \"react-onclickoutside\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"react\"), require(\"classnames\"), require(\"immutable\"), require(\"lodash\"), require(\"recompose\"), require(\"prop-types\"), require(\"moment\"), require(\"react-date-range\"), require(\"react-dropzone\"), require(\"react-onclickoutside\")) : factory(root[\"React\"], root[\"classnames\"], root[\"Immutable\"], root[\"_\"], root[\"Recompose\"], root[\"prop-types\"], root[\"Moment\"], root[\"ReactDateRange\"], root[\"ReactDropzone\"], root[\"ReactOnclickoutside\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_23__, __WEBPACK_EXTERNAL_MODULE_24__, __WEBPACK_EXTERNAL_MODULE_51__, __WEBPACK_EXTERNAL_MODULE_52__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 37);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0c25199e8aaa2b7dc7cf","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\",\"root\":\"React\"}\n// module id = 0\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"classnames\",\"commonjs2\":\"classnames\",\"amd\":\"classnames\",\"root\":\"classnames\"}\n// module id = 1\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"immutable\",\"commonjs2\":\"immutable\",\"amd\":\"immutable\",\"root\":\"Immutable\"}\n// module id = 2\n// module chunks = 0","/** Libraries */\r\nimport {ComponentType, ReactHTMLElement} from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Recompose from 'recompose';\r\nimport {isUndefined} from 'lodash';\r\nimport {getContext, withProps, shouldUpdate, withHandlers, compose, lifecycle} from 'recompose';\r\nimport {Map} from 'immutable';\r\n\r\n/** Components */\r\nimport {isMultipleValueInput, returnCheckedValue} from './inputHelpers';\r\nimport {setInput, setInputInteraction, setValidation} from '../Actions/fields';\r\nimport {BaseReactProps, WithHandlersGuard, PerformanceWrapperProps, FormContext, PerformanceWrapperWithProps,\r\n        PerformanceWrapperWithHandlers, PerformanceWrapperInputHelpers, FieldSetNameSpaceProp, ValidationProps, OptionsProp,\r\n        PerformanceWrapperUncalledInputHelpers, PerformanceWrapperUncalledValidationHelpers, NameProp, IdProp, TypeProp,\r\n        PossibleInputValue, OptionalValidationProps, LabelProp, DefaultValueProp, InputInfoProps, DefaultSwitchProps,\r\n        NameSpaceProp, FormStateProp, ValueProp, SetValidation, AdditionalCompareProps} from '../../../typings/types.d';\r\nimport createSpecificShallowEqual from '../../Form/Helpers/createSpecificShallowEqual';\r\n\r\ninterface GetInputPathGuard extends NameProp, IdProp, FieldSetNameSpaceProp {}\r\ninterface GetValidationPathGuard extends NameProp, FieldSetNameSpaceProp {}\r\ninterface WithNeededPropsGuard extends DefaultSwitchProps, DefaultValueProp<PossibleInputValue>, ValueProp<PossibleInputValue>, NameProp, IdProp, TypeProp {}\r\ntype SpecificShallowEqualInterface = InputInfoProps & NameProp & NameSpaceProp & TypeProp & IdProp & BaseReactProps & OptionalValidationProps  & ValidationProps & DefaultValueProp<PossibleInputValue> & DefaultSwitchProps & OptionsProp & FieldSetNameSpaceProp & ValueProp<PossibleInputValue> & LabelProp\r\n\r\n/** Helpers */\r\nconst specificShallowEqual = createSpecificShallowEqual(\"inputInfo\", \"name\", \"nameSpace\", \"type\", \"id\", \"disabled\", \"noValidate\", \"required\", \"className\", \"defaultValue\", \"defaultChecked\", \"defaultSelected\", \"options\", \"fieldSetNameSpace\", \"value\", \"label\");\r\n\r\nconst specificShallowEqualDefault = createSpecificShallowEqual(\"defaultValue\");\r\n\r\nconst specificShallowEqualValue = createSpecificShallowEqual(\"value\");\r\n\r\nconst getUnsetValue = ({type}:TypeProp) => {\r\n  if (type === 'radio' || type === 'checkbox') {\r\n    return undefined;\r\n  } else {\r\n    return '';\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n * @param type The type of grouping - 'input' or 'validation'\r\n * @param Object The values for each of the items i.e. {name, id, fieldSetNameSpace}\r\n */\r\nexport const getInputPath = (type: 'input' | 'validation', {name, id, fieldSetNameSpace}:GetInputPathGuard):string[] => {\r\n  if(isMultipleValueInput(name) && fieldSetNameSpace !== undefined) {\r\n    if(id) {\r\n      return [fieldSetNameSpace, name, type, id];\r\n    } else {\r\n      return [fieldSetNameSpace, name, type];\r\n    }\r\n  } else if (fieldSetNameSpace !== undefined) {\r\n    return [fieldSetNameSpace, name];\r\n  } else if (isMultipleValueInput(name)) {\r\n    if(id){\r\n      return [name, type, id];\r\n    } else {\r\n      return [name, type];\r\n    }\r\n  }\r\n  return [name];\r\n}\r\n\r\nexport const getPrioritisedDefaultValue = (defaultValue?:PossibleInputValue, defaultChecked?:boolean | number | string, defaultSelected?:boolean | number | string) => (\r\n  returnCheckedValue((arg) => !isUndefined(arg) && arg !== false, defaultValue, defaultChecked, defaultSelected)\r\n);\r\n\r\nexport const getPrioritisedValue = (value:PossibleInputValue, inputInfoValue:PossibleInputValue, prioritisedDefaultValue:PossibleInputValue, unsetValue:string | boolean) => (\r\n  returnCheckedValue((arg) => !isUndefined(arg), value, inputInfoValue, prioritisedDefaultValue, unsetValue)\r\n);\r\n\r\nconst setIdToDefault = (type:string, id:string, defaultSwitch:string | number | boolean) => {\r\n  if((type === 'radio' || type === 'checkbox') && typeof defaultSwitch === 'boolean' && defaultSwitch !== false){\r\n    return id;\r\n  }\r\n  return defaultSwitch;\r\n}\r\n\r\nexport const withNeededProps =<TOutter extends WithNeededPropsGuard> () =>\r\n  withProps<PerformanceWrapperWithProps, PerformanceWrapperWithHandlers & FormContext & TOutter>((props: FormContext & TOutter) => {\r\n    if(props.nameSpace === undefined){\r\n      throw new Error(`nameSpace is undefined ensure that a Form component is a parent of the component with name: \"${props.name}\"`);\r\n    }\r\n\r\n    const inputPath = getInputPath(\"input\", props);\r\n    const inputInfo = props.FormState.getIn([props.nameSpace, ...inputPath], Map({}))\r\n    const {defaultValue, defaultChecked, defaultSelected} = props;\r\n\r\n    const prioritisedDefaultValue = getPrioritisedDefaultValue(\r\n      defaultValue,\r\n      setIdToDefault(props.type, props.id, defaultChecked),\r\n      setIdToDefault(props.type, props.id, defaultSelected)\r\n    );\r\n    const value = getPrioritisedValue(props.value, inputInfo.get('value'), prioritisedDefaultValue, getUnsetValue(props));\r\n    return {\r\n      inputInfo,\r\n      defaultValue: prioritisedDefaultValue,\r\n      inputPath,\r\n      value\r\n    };\r\n  });\r\n\r\nconst setValidationWithHandlersObject = {\r\n  setValidation: ({dispatch, nameSpace, ...props}:SetValidation) => (type:string, test:string | boolean) => {\r\n    dispatch(setValidation(nameSpace, getInputPath(\"validation\", props), type, test));\r\n  },\r\n  compareAdditionalProps: ({additionalCompareProps}:AdditionalCompareProps) => {\r\n    if(additionalCompareProps){\r\n      return createSpecificShallowEqual(...additionalCompareProps);\r\n    } else {\r\n      return () => false;\r\n    }\r\n  },\r\n}\r\n\r\nexport const updateLifcycle =<TOutter extends ValueProp<PossibleInputValue>> () => lifecycle<PerformanceWrapperProps & TOutter, {}>({\r\n  componentWillMount() {\r\n    this.props.inputChanged(this.props.value, false);\r\n  },\r\n  componentWillReceiveProps(nextProps){\r\n    if(!specificShallowEqualDefault(nextProps, this.props)) {\r\n      nextProps.inputChanged(nextProps.defaultValue, false);\r\n    }\r\n    if(!specificShallowEqualValue(nextProps, this.props)) {\r\n      nextProps.inputChanged(nextProps.value, true);\r\n    }\r\n    if(!nextProps.FormState.hasIn([nextProps.nameSpace, ...nextProps.inputPath])) {\r\n      nextProps.inputChanged(nextProps.value, false);\r\n    }\r\n}});\r\n\r\n\r\nconst createUniversalCompose = <TOutter extends WithHandlersGuard, TWithHandlers extends {}> (withHandlersArgs:TWithHandlers, type:string = \"input\") => compose<PerformanceWrapperProps & TOutter, TOutter>(\r\n  getContext<FormContext>({\r\n    nameSpace: PropTypes.string,\r\n    FormState: PropTypes.object,\r\n    fieldSetNameSpace: PropTypes.string,\r\n    dispatch: PropTypes.func\r\n  }),\r\n  withNeededProps<TOutter>(),\r\n  withHandlers<TWithHandlers, FormContext & TOutter>(withHandlersArgs),\r\n  shouldUpdate<PerformanceWrapperProps & TOutter>((props, nextProps) => {\r\n    return !specificShallowEqual(props, nextProps) || !nextProps.compareAdditionalProps(props, nextProps);\r\n  })\r\n);\r\n\r\n\r\nexport const validationPerformanceWrapper =<TOutter extends WithHandlersGuard> (ReactClass:ComponentType<TOutter & PerformanceWrapperProps>) => (\r\n  createUniversalCompose<TOutter, PerformanceWrapperUncalledValidationHelpers>(setValidationWithHandlersObject as any)(ReactClass)\r\n)\r\n\r\nexport default <TOutter extends WithHandlersGuard> (ReactClass:ComponentType<TOutter & PerformanceWrapperProps>) => {\r\n  const inputWrapperCompose = createUniversalCompose<TOutter, PerformanceWrapperUncalledInputHelpers>({\r\n      inputChanged: ({dispatch, nameSpace, name, id, fieldSetNameSpace}) => (value, changed:boolean = true) => {\r\n        const inputPath = getInputPath(\"input\", {name, id, fieldSetNameSpace})\r\n        dispatch(setInput(nameSpace, inputPath, value));\r\n        dispatch(setInputInteraction(nameSpace, inputPath, 'changed', changed));\r\n      },\r\n      setInputBlurred: ({dispatch, nameSpace, ...props}) => () => {\r\n        dispatch(setInputInteraction(nameSpace, getInputPath(\"input\", props as any), 'blurred', true));\r\n      },\r\n      ...setValidationWithHandlersObject\r\n  } as any);\r\n\r\n  return compose<PerformanceWrapperProps & TOutter, TOutter>(\r\n    inputWrapperCompose,\r\n    updateLifcycle<TOutter>()\r\n  )(ReactClass);\r\n}\n\n\n// WEBPACK FOOTER //\n// src/Form/Helpers/performanceWrapper.ts","/** Libraries */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {pick} from 'lodash';\r\n\r\n/** Components */\r\nimport {PossibleInputValue, ValueProp, TypeProp, IdProp,\r\n        InputValidationProps, NameProp, BaseReactProps} from '../../../typings/types.d';\r\n\r\n/** Interfaces */\r\ninterface PickedAttrs {\r\n  [name: string]: any\r\n}\r\ninterface GetHTMLAttributesGuard extends ValueProp<PossibleInputValue>, BaseReactProps, TypeProp, IdProp {}\r\n\r\n/**\r\n * Checks whether the specified input field is a multi-value\r\n * input field or not\r\n * @param inputName The name of the input which needs to be checked\r\n */\r\nexport const isMultipleValueInput = (inputName: string): boolean => {\r\n  return inputName.search(/\\[\\]$/) !== -1;\r\n}\r\n\r\n/**\r\n * Checks all the supplied values and returns\r\n * the appropriately validated value\r\n * @param check Test for the values supplied\r\n * @param args Values that need to be checked with the test provided\r\n */\r\nexport function returnCheckedValue<T>(check:(arg:T) => boolean, ...args:T[]){\r\n  const innerReturnCheckedValue = (index = 0):T|undefined => {\r\n    if (index === args.length) {\r\n      return undefined;\r\n    } else if (check(args[index])) {\r\n      return args[index];\r\n    }\r\n    return innerReturnCheckedValue(index + 1);\r\n  };\r\n  return innerReturnCheckedValue();\r\n};\r\n\r\n/**\r\n * getHTMLAttributes\r\n * @param props All the props on which the 'picking' is performed\r\n */\r\nexport const getHTMLAttributes = <T extends GetHTMLAttributesGuard> (props:T) => {\r\n  const safeProps = pick<PickedAttrs>(props, \"id\", \"autoFocus\", \"required\", \"name\", \"type\", \"value\", \"min\", \"max\", \"minLength\", \"maxLength\", \"pattern\", \"accept\", \"multiple\", \"placeholder\", \"disabled\", \"rows\");\r\n  return safeProps;\r\n}\n\n\n// WEBPACK FOOTER //\n// src/Form/Helpers/inputHelpers.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"lodash\",\"commonjs2\":\"lodash\",\"amd\":\"lodash\",\"root\":\"_\"}\n// module id = 5\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"recompose\",\"commonjs2\":\"recompose\",\"amd\":\"recompose\",\"root\":\"Recompose\"}\n// module id = 6\n// module chunks = 0","/** Libraries */\r\nimport React from 'react';\r\n\r\n/** Components */\r\nimport ErrorWrapper from './ErrorWrapper';\r\n\r\n/** Interfaces */\r\nimport {InputWrapperProps} from '../../typings/types.d';\r\n\r\n/** Styles */\r\nimport './InputWrapper.scss';\r\n\r\n/** Class InputWrapper */\r\nclass InputWrapper extends React.Component<InputWrapperProps, undefined> {\r\n  render() {\r\n    const {className, name, label, labelPrefix, labelPostfix, type, children} = this.props;\r\n\r\n    return (\r\n      <ErrorWrapper className={className} type={type}>\r\n        {(label || labelPostfix || labelPrefix) && (\r\n          <div className=\"input-label-wrapper\">\r\n            {labelPrefix && <div className=\"input-label-prefix\">{labelPrefix}</div>}\r\n            <label className=\"input-label\" htmlFor={name}>{label}</label>\r\n            {labelPostfix && <div className=\"input-label-postfix\">{labelPostfix}</div>}\r\n          </div>\r\n        )}\r\n        {children}\r\n      </ErrorWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputWrapper;\n\n\n// WEBPACK FOOTER //\n// src/Form/InputWrapper.tsx","/** Libraries */\r\nimport React from 'react';\r\n\r\n/** Components */\r\nimport Validation from '../Validation/Validation';\r\n\r\n/** Helpers */\r\nimport {validationsMessages, validationsAvailable} from '../../libs/validate';\r\n\r\nconst childrenValidations = (children: React.ReactNode) => {\r\n  if (React.Children.count(children) > 0) {\r\n    return React.Children.map<InputTest>(children, (child: ValidationChild) => {\r\n      return child.props.isFor;\r\n    })\r\n  }\r\n  return [];\r\n}\r\n\r\nconst isSwitch = (type?: InputType): boolean => type === \"checkbox\" || type === 'radio';\r\n\r\nconst validationsUnused = (validationsUsed: InputTest[], validationsAvailable: InputTest[], isSwitch: boolean): InputTest[] => {\r\n  return validationsAvailable.filter(validation => {\r\n    if (validation === 'type' && isSwitch) return false;\r\n    return validationsUsed.indexOf(validation) === -1;\r\n  });\r\n}\r\n\r\n/** Interfaces */\r\nimport {ValidationElementProps, InputInfoProps, ValidationAdditionProps, ValidationCloneElementProps, \r\n        DisplayValidationProps, TypeProp, InputType, InputTest, PerformanceWrapperProps} from '../../typings/types.d';\r\n\r\ntype ValidationChild = React.ReactElement<ValidationElementProps>\r\n\r\ntype ValidationAdditionChild = React.ReactElement<ValidationAdditionProps>\r\n\r\n/** Class DisplayValidation */\r\nclass DisplayValidation extends React.Component<PerformanceWrapperProps & DisplayValidationProps, undefined> {\r\n  render() {\r\n    const {children, disabled, inputInfo, noValidate, type, ...props} = this.props;\r\n\r\n    const validationsAvail = validationsAvailable(props);\r\n    const validationUsed = childrenValidations(children);\r\n    const unusedValidations = validationsUnused(validationUsed, validationsAvail, isSwitch(type));\r\n\r\n    if (disabled || noValidate) {\r\n      return <noscript />;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {React.Children.map<ValidationAdditionChild>(children, (child:ValidationAdditionChild) => {\r\n          const typeOfValidation = child.props.isFor;\r\n          return React.cloneElement<ValidationAdditionProps, ValidationCloneElementProps>(child, {\r\n            test: props[typeOfValidation],\r\n            inputInfo,\r\n            type: type,\r\n            name: props.name,\r\n            setValidation: props.setValidation\r\n          });\r\n        })}\r\n        {unusedValidations.map<ValidationAdditionChild>((validation, index) => React.createElement(Validation as React.ComponentClass<ValidationAdditionProps>, {\r\n          key: index,\r\n          isFor: validation,\r\n          test: props[validation],\r\n          inputInfo,\r\n          type: type,\r\n          children: validationsMessages(validation, props[validation]),\r\n          name: props.name,\r\n          setValidation: props.setValidation\r\n        }))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayValidation;\n\n\n// WEBPACK FOOTER //\n// src/Validation/DisplayValidation.tsx","/** Libraries */\r\nimport React from 'react';\r\nimport classnames from 'classnames';\r\n\r\n/** Interfaces */\r\nimport {InputGroupProps} from '../../typings/types.d';\r\n\r\n/** Styles */\r\nimport './InputGroup.scss';\r\n\r\n/** Internal method to make creation of input boxes with appended or prepended segments easier */\r\nconst InputGroup = ({prepend, append, children} : InputGroupProps) => {\r\n  const inputGroupClass:string = classnames('input-group', {'input-prepend': !!prepend}, {'input-append': !!append});\r\n  return (\r\n    <div className={inputGroupClass}>\r\n      {!!append && <span className=\"input-addon\">{append}</span>}\r\n      {children}\r\n      {!!prepend && <span className=\"input-addon\">{prepend}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputGroup;\n\n\n// WEBPACK FOOTER //\n// src/Form/InputGroup.tsx","import {Iterable} from \"immutable\";\r\nimport regExpList from \"./validationRegExps\";\r\nimport {ValidationTypes, PossibleInputValue, TestType, InputTest, InputType, TypeProp} from '../typings/types.d';\r\n\r\nexport const validations:ValidationTypes = {\r\n  required: (value, test, type) => {\r\n    if (Iterable.isIterable(value)) {\r\n      if (type === 'checkbox') {\r\n        return (value as Iterable<any, any>).size > 0;\r\n      }\r\n    } else if (type === \"checkbox\") {\r\n      return value === true;\r\n    }\r\n    return value.toString().length > 0 && value !== false;\r\n  },\r\n  pattern: (value, test) => {\r\n    if(value !== undefined && value !== null && (value + \"\").length > 0){\r\n      let patternRegExp = new RegExp(test);\r\n      return patternRegExp.test(value as string);\r\n    }\r\n    return true;\r\n  },\r\n  type: (value, test) => {\r\n    if(test === 'number' || test ==='email'){\r\n      let typeRegExp = new RegExp(regExpList[test]);\r\n      return typeRegExp.test(value as string);\r\n    }\r\n    return true;\r\n  },\r\n  minLength: (value, test) => {\r\n    return value.toString().length >= parseInt(test);\r\n  },\r\n  maxLength: (value, test) => {\r\n    return value.toString().length <= parseInt(test);\r\n  },\r\n  min: (value, test) => {\r\n    return parseInt(value as string) >= parseInt(test)\r\n  },\r\n  max: (value, test) => {\r\n    return parseInt(value as string) <= parseInt(test)\r\n  },\r\n  'default': () => {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const validationsMessages = (type:string, test?:boolean | string | number) => {\r\n  switch (type) {\r\n    case \"required\":\r\n      return `This is a required field.`;\r\n    case \"minLength\":\r\n      return `This is too short, it must have at least ${test} characters.`;\r\n    case \"maxLength\":\r\n      return `This is too long, it cannot have more then ${test} characters.`;\r\n    case \"min\":\r\n      return `This must be at least ${test}.`;\r\n    case \"max\":\r\n      return `This must not be greater than ${test}.`;\r\n    case \"type\":\r\n      return `That's not a valid ${test}.`;\r\n    default:\r\n      return '';\r\n  }\r\n};\r\n\r\nexport function testValidation(value: PossibleInputValue, typeOfTest:InputTest, typeOfInput:InputType, test:TestType) {\r\n  if (value !== undefined && value !== null) {\r\n    if (validations[typeOfTest] !== undefined) {\r\n      if(typeOfTest === 'required'){\r\n        return validations[typeOfTest](value, test as boolean, typeOfInput);\r\n      } else {\r\n        return validations[typeOfTest](value, test as string);\r\n      }\r\n    } else {\r\n      return validations['default']();\r\n    }\r\n  }\r\n  return validations['default']();\r\n}\r\n\r\nexport function validationsAvailable<T>(inputAttributes:T) {\r\n  const validationsAvail = Object.keys(validations) as (keyof ValidationTypes)[];\r\n  return validationsAvail.filter(validation => inputAttributes.hasOwnProperty(validation) && validation !== 'default') as InputTest[];\r\n}\r\n\r\ninterface TestElementProps extends TypeProp{\r\n  value:any,\r\n  setValid: (value:boolean) => undefined\r\n  test?: TestType,\r\n  isFor: InputTest | \"customValidation\",\r\n}\r\n\r\nexport type TestElement = ({value, test, isFor, type, setValid}: TestElementProps) => void\r\n\r\nexport const testElement:TestElement = ({value, test, isFor, type, setValid}) => {\r\n  if (test === false || test === 'false') {\r\n    return setValid(true);\r\n  } else if (isFor !== 'customValidation' && typeof test !== \"function\") {\r\n    return setValid(testValidation(value, isFor, type, test));\r\n  } else {\r\n    if (typeof test === \"function\") {\r\n      const customValidation = test(value);\r\n      if (typeof customValidation === \"boolean\" || customValidation === \"undefined\") {\r\n        return setValid(!!customValidation);\r\n      } else if (customValidation instanceof Promise){\r\n        customValidation.then(res => setValid(!!res)).catch(res => setValid(!!res));\r\n        return setValid(true);\r\n      } else {\r\n        return console.error(\"Custom validation functions must return a bool, undefined or a promise\");\r\n      }\r\n    }\r\n    return setValid(false);\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// libs/validate.ts","/** Libraries */\r\nimport {Dispatch, Action} from 'redux';\r\nimport {Map} from 'immutable';\r\n\r\n/** Constants */\r\nexport const SET_INPUT = 'SET_INPUT';\r\nexport const SET_VALIDATION = 'SET_VALIDATION';\r\nexport const SET_INPUT_INTERACTION = 'SET_INPUT_INTERACTION';\r\nexport const SET_ALL_INPUT_INTERACTIONS = 'SET_ALL_INPUT_INTERACTIONS';\r\nexport const CLEAR_ALL_INPUTS = 'CLEAR_ALL_INPUTS';\r\n\r\n/** Interfaces */\r\nimport {PossibleInputValue, SetInputAction, SetValidationAction, SetInputInteractionAction, ClearAllInputsAction, SetAllInputInteractionAction} from '../../../typings/types.d';\r\n\r\nexport function setInput(nameSpace: string, inputName:string[], value:PossibleInputValue):SetInputAction {\r\n  return {\r\n    type: SET_INPUT,\r\n    payload: {\r\n      nameSpace,\r\n      inputName,\r\n      value\r\n    }\r\n  };\r\n}\r\n\r\nexport function setValidation(nameSpace: string, inputName:string[], type:string, test:string|boolean):SetValidationAction {\r\n  return {\r\n    type: SET_VALIDATION,\r\n    payload: {\r\n      nameSpace,\r\n      inputName,\r\n      type, \r\n      test\r\n    }\r\n  };\r\n}\r\n\r\nexport function setInputInteraction(nameSpace:string, inputName:string[], interaction:string, value:boolean):SetInputInteractionAction {\r\n  return {\r\n    type: SET_INPUT_INTERACTION,\r\n    payload: {\r\n      nameSpace,\r\n      inputName,\r\n      interaction,\r\n      value,\r\n    }\r\n  };\r\n}\r\n\r\nexport function setAllInputInteractions(nameSpace:string, interaction:string, value:boolean):SetAllInputInteractionAction {\r\n  return {\r\n    type: SET_ALL_INPUT_INTERACTIONS,\r\n    payload: {\r\n      nameSpace,\r\n      interaction,\r\n      value\r\n    }\r\n  };\r\n}\r\n\r\nexport function clearAllInputs(nameSpace:string):ClearAllInputsAction {\r\n  return {\r\n    type: CLEAR_ALL_INPUTS,\r\n    payload: {\r\n      nameSpace\r\n    }\r\n  }\r\n}\r\n\r\nexport function setDefaultValue(nameSpace:string, inputName:string[], value:PossibleInputValue) {\r\n  return function (dispatch:(action:SetInputAction) => void, getState: () => Map<string, any>) {\r\n    const currentValue = getState().getIn(['FormState', nameSpace, inputName, 'value'], false);\r\n    if (!currentValue) {\r\n      dispatch(setInput(nameSpace, inputName, value));\r\n    }\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// src/Form/Actions/fields.ts","/** Libraries */\r\nimport React from 'react';\r\nimport classnames from 'classnames';\r\n\r\n/** Interfaces */\r\nimport {ErrorWrapperProps} from '../../typings/types.d';\r\n\r\n/** Class ErrorWrapper */\r\nclass ErrorWrapper extends React.Component<ErrorWrapperProps, undefined> {\r\n  render() {\r\n    const {className, style, type, children} = this.props;\r\n\r\n    var classes = classnames(className, {\r\n      'input-hidden': type === 'hidden'\r\n    });\r\n    \r\n    return (\r\n      <div className={classes} style={style}>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorWrapper;\n\n\n// WEBPACK FOOTER //\n// src/Form/ErrorWrapper.tsx","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"prop-types\",\"commonjs2\":\"prop-types\",\"amd\":\"prop-types\",\"root\":\"prop-types\"}\n// module id = 13\n// module chunks = 0","import {isMultipleValueInput} from \"./inputHelpers\";\r\nimport {Map, List, Iterable} from \"immutable\";\r\n\r\nexport const convertToFormData = (formMap:Map<string, any>) => {\r\n  const formData = new FormData();\r\n  if(Iterable.isIterable(formMap)){\r\n    formMap.forEach((value, key:string) => {\r\n    if(Iterable.isIterable(value) && value.size === 1 && value.first() instanceof File) {\r\n      formData.append(key, value.first());\r\n    } else if (Map.isMap(value)) {\r\n      value.map((innerVal:string | Blob, index:number) => {\r\n        if(innerVal !== null){\r\n          formData.append(key + `.${index}`, innerVal);\r\n        }\r\n      })\r\n    } else if (List.isList(value)) {\r\n      value.map((innerVal:string | Blob, index:number) => {\r\n        if(innerVal !== null){\r\n          formData.append(key + `[${index}]`, innerVal);\r\n        }\r\n      })\r\n    } else {\r\n      if(value !== null){\r\n        formData.append(key, value);\r\n      }\r\n    }\r\n  });\r\n  return formData;\r\n  }\r\n  throw new Error(\"convertToFormData requires a Immutable Iterable object\")\r\n};\r\n\r\nexport const normalizeFields = (fields:Map<string, any>) => {\r\n  return fields && fields.map<Map<string, any>>((input, inputName:string) => {\r\n    if (isMultipleValueInput(inputName)) {\r\n      return input.map((innerInput:Map<string, any>)=> {\r\n        return innerInput.get('value');\r\n      });\r\n    }\r\n    return input.get('value');\r\n  });\r\n};\n\n\n// WEBPACK FOOTER //\n// src/Form/Helpers/formHelpers.ts","/** Libraries */\r\nimport {Map} from 'immutable';\r\n\r\n/** Helpers */\r\nimport {getInputValue, getInputState, getInputValidation} from '../Helpers/path';\r\nimport {isMultipleValueInput} from '../Helpers/inputHelpers';\r\n\r\n/** Interfaces */\r\nimport {FSA, ClearAllInputsAction, SetInputAction, SetAllInputInteractionAction, \r\n  SetInputInteractionAction, SetValidationAction, ReducerFunc, BasicReducer} from '../../../typings/types.d';\r\n\r\nexport const basicReducer:BasicReducer = {\r\n  SET_INPUT: (state, {payload}) => {\r\n    const valuePath = getInputValue(payload.nameSpace, payload.inputName);\r\n    return state.setIn(valuePath, payload.value);\r\n  },\r\n\r\n  SET_VALIDATION: (state, {payload}) => {\r\n    const validationPath = getInputValidation(payload.nameSpace, payload.inputName);\r\n    return state.updateIn(validationPath, Map(), validationMap => {\r\n      return validationMap.set(payload.type, payload.test)\r\n    });\r\n  },\r\n\r\n  SET_INPUT_INTERACTION: (state, {payload}) => {\r\n    const interactionPath = getInputState(payload.nameSpace, payload.inputName, payload.interaction);\r\n    return state.setIn(interactionPath, payload.value);\r\n  },\r\n\r\n  SET_ALL_INPUT_INTERACTIONS: (state, {payload}) => {\r\n    const inputs:Map<string, Map<string, any>> = state.get(payload.nameSpace, Map({}));\r\n    if (inputs.size && inputs.size === 0) {\r\n      return state;\r\n    }\r\n    const updatedFields = inputs.map((input:Map<string, any>, key:string) => {\r\n      if (isMultipleValueInput(key)) {\r\n        return input.map((innerInput:Map<string, any>) => {\r\n          return innerInput.setIn([\"input\", payload.interaction], payload.value);\r\n        });\r\n      }\r\n      return input.set(payload.interaction, payload.value);\r\n    });\r\n    return state.set(payload.nameSpace, updatedFields);\r\n  },\r\n  CLEAR_ALL_INPUTS: (state, {payload}) => {\r\n    return state.set(payload.nameSpace, Map({}))\r\n  }\r\n}\r\n\r\nexport const withReducerState = (state = Map<string, {}>(), action:ClearAllInputsAction | SetInputAction | SetAllInputInteractionAction | SetInputInteractionAction | SetValidationAction) => {\r\n  const reducerFunc:ReducerFunc<Map<string, {}>> = basicReducer[action.type];\r\n  if(typeof reducerFunc === 'function'){\r\n    return reducerFunc(state, action);\r\n  }else{\r\n    return state;\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// src/Form/Reducers/index.ts","/** Libraries */\r\nimport React from 'react';\r\nimport classnames from 'classnames';\r\n\r\n/** Components */\r\nimport InputGroup from '../Form/InputGroup';\r\nimport InputWrapper from '../Form/InputWrapper';\r\nimport InputBase from './Base';\r\nimport DisplayValidation from '../Validation/DisplayValidation';\r\nimport performanceWrapper from '../Form/Helpers/performanceWrapper';\r\n\r\n/** Interfaces */\r\nimport {TextInputProps, PerformanceWrapperProps} from '../../typings/types.d';\r\n\r\n/** Class Input */\r\nexport class Input extends React.Component<TextInputProps & PerformanceWrapperProps, {}> {\r\n  render (){\r\n    const {className, label, labelPostfix, labelPrefix, prepend, append, ...props} = this.props;\r\n    const {autoFocus, onChange, onBlur, id, value, ...validationProps} = props;\r\n    const classes:string = classnames(className, 'input');\r\n    \r\n    if (props.type !== 'hidden') {\r\n      return (\r\n        <InputWrapper className={classes} type={props.type} name={props.name} labelPrefix={labelPrefix} labelPostfix={labelPostfix} label={label}>\r\n          <InputGroup prepend={prepend} append={append}>\r\n            <InputBase {...props} />\r\n          </InputGroup>\r\n          <DisplayValidation {...validationProps} />\r\n        </InputWrapper>\r\n      );\r\n    }\r\n    return <InputBase {...props} />\r\n  }\r\n};\r\n\r\nexport default performanceWrapper<TextInputProps>(Input);\n\n\n// WEBPACK FOOTER //\n// src/Input/Input.tsx","/** Libraries */\r\nimport React from 'react';\r\nimport classnames from 'classnames';\r\n\r\n/** Components */\r\nimport Switch from '../Switch/Switch';\r\n\r\n/** Interfaces */\r\nimport {SwitchProps} from '../../typings/types.d';\r\n\r\n/** \r\n * Class Radio\r\n * Creates a radio button connected to forms \r\n * state management. All HTML5 attributes apply.\r\n */\r\nclass Radio extends React.Component<SwitchProps, {}> {\r\n  render() {\r\n    const {className, ...other} = this.props;\r\n    var classes: string = classnames(className, 'radio');\r\n    \r\n    return (\r\n      <Switch className={classes} {...other} type=\"radio\"/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radio;\n\n\n// WEBPACK FOOTER //\n// src/Radio/Radio.tsx","/** Libraries */\r\nimport React, {ComponentType} from 'react';\r\nimport {Map} from 'immutable';\r\nimport {withProps, mapProps, shouldUpdate, ComponentEnhancer, InferableComponentEnhancer, compose, withState, withHandlers, lifecycle} from 'recompose';\r\nimport classnames from 'classnames';\r\nimport createSpecificShallowEqual from '../Form/Helpers/createSpecificShallowEqual';\r\n\r\n/** Helpers */\r\nimport {testElement, validations, TestElement} from '../../libs/validate';\r\nimport {isMultipleValueInput, returnCheckedValue} from '../Form/Helpers/inputHelpers';\r\n\r\nconst specificShallowEqual = createSpecificShallowEqual('value', 'changed', 'type');\r\n\r\nconst specificShallowEqualDisplayed = createSpecificShallowEqual('displayed', 'className');\r\n\r\nconst specificShallowEqualTestElement = createSpecificShallowEqual(\"value\", \"typeOfValidation\", \"type\");\r\n\r\nconst availableValidationsShallowEqual = createSpecificShallowEqual(\"isFor\", \"test\", ...Object.keys(validations));\r\n\r\nconst Validation = ({displayed, className, children}: ValidationInnerElementProps) => {\r\n  const classes = classnames('validation', className, {\r\n    'invalid': displayed\r\n  });\r\n  return <div className={classes}>{children}</div>;\r\n};\r\n\r\nconst getValue = (name: string, inputInfo: Map<string, any>) : PossibleInputValue => {\r\n  if(isMultipleValueInput(name) && Map.isMap(inputInfo)){\r\n    return returnCheckedValue((arg) => typeof arg !== \"undefined\" && arg !== false, ...inputInfo.map(item => item.get('value', false)).toArray())\r\n  } else {\r\n    return inputInfo.get('value') || false;\r\n  }\r\n}\r\n\r\n/** Interfaces */\r\nimport {ValidationAdditionProps, TextInputProps, ValidationInnerElementProps,\r\n        ValueProp, TypeProp, PossibleInputValue, ValidationTypes, ValidationComponentProps} from '../../typings/types.d';\r\n\r\ninterface ValidationInternalAdditionProps extends ValidationAdditionProps{\r\n  value:ValueProp<PossibleInputValue>,\r\n  valid: boolean\r\n}\r\n\r\ninterface ValidationMapProps extends ValidationAdditionProps{\r\n  changed:boolean,\r\n  value:ValueProp<PossibleInputValue>\r\n}\r\n\r\ninterface ValidationWithStateProps extends ValidationMapProps{\r\n  valid: boolean,\r\n  setValid: (valid:boolean) => undefined,\r\n  typeOfValidation: string\r\n}\r\n\r\ninterface TestHandersUncalledInterface {\r\n  testElement: () => TestElement\r\n}\r\n\r\ninterface TestHandersInterface {\r\n  testElement: TestElement\r\n}\r\n\r\ninterface ValidationLifecycleProps extends ValidationMapProps, TestHandersInterface {}\r\n\r\n/** Styles */\r\nimport './Validation.scss';\r\n\r\n/** Class Validation */\r\nexport default compose<ValidationInnerElementProps, ValidationComponentProps>(\r\n  withProps((ownerProps : ValidationAdditionProps) => {\r\n    const {name, inputInfo, type} = ownerProps;\r\n    const changed:boolean = isMultipleValueInput(name) ? inputInfo.some(item => item.get('changed', false)) : inputInfo.get('changed', false);\r\n    const value:PossibleInputValue = getValue(name, inputInfo);\r\n    return {\r\n      changed,\r\n      value\r\n    }\r\n  }), shouldUpdate((currentProps:ValidationMapProps, nextProps:ValidationMapProps) => {\r\n    return !specificShallowEqual(currentProps, nextProps) || !availableValidationsShallowEqual(currentProps, nextProps);\r\n  }),\r\n  withState('valid', 'setValid', false),\r\n  withHandlers<TestHandersUncalledInterface, ValidationWithStateProps>({\r\n    testElement: () => testElement\r\n  }),\r\n  lifecycle<ValidationWithStateProps & TestHandersInterface, {}>({\r\n    componentWillMount(){\r\n      const {testElement, setValidation, value, type, isFor, test} = this.props;\r\n      setValidation(isFor, test);\r\n      // value, test, isFor, type, setValid\r\n      testElement(this.props);\r\n    },\r\n    componentWillReceiveProps(nextProps){\r\n      if(!specificShallowEqualTestElement(this.props, nextProps)){\r\n        nextProps.testElement(nextProps);\r\n      }\r\n      if(!availableValidationsShallowEqual(this.props, nextProps)){\r\n        nextProps.setValidation(nextProps.isFor, nextProps.test)\r\n      }\r\n    }\r\n  }),\r\n  mapProps((ownerProps:ValidationWithStateProps) => {\r\n    const {valid, value, className, changed, children, test} = ownerProps;\r\n    return {\r\n      displayed: !valid && changed,\r\n      className,\r\n      children\r\n    }\r\n  }), shouldUpdate((currentProps:ValidationInnerElementProps, nextProps:ValidationInnerElementProps) => {\r\n    return !specificShallowEqualDisplayed(currentProps, nextProps);\r\n  })\r\n)(Validation);\n\n\n// WEBPACK FOOTER //\n// src/Validation/Validation.tsx","/** Libraries */\r\nimport React, {Component, FocusEvent} from 'react';\r\nimport classnames from 'classnames';\r\nimport onReactOutsideClick from 'react-onclickoutside';\r\n\r\n/** Components */\r\nimport InputWrapper from '../Form/InputWrapper';\r\nimport InputGroup from '../Form/InputGroup';\r\n\r\n/** Interfaces */\r\nimport {InternalDateWrapperProps} from '../../typings/types.d';\r\n\r\ninterface StateProps {\r\n  hidden: boolean\r\n}\r\n\r\nexport interface DateWrapperPassedDownProps {\r\n  /** Close the popup modal */\r\n  close?: () => undefined\r\n}\r\n\r\n/** Class DateWrapper */\r\nclass DateWrapper extends Component<InternalDateWrapperProps, StateProps>{\r\n  refs: {\r\n    [name: string]: HTMLInputElement;\r\n  }\r\n\r\n  constructor(props:InternalDateWrapperProps){\r\n    super(props);\r\n    \r\n    this.state = {\r\n      hidden: true\r\n    }\r\n  }\r\n\r\n  handleFocus = (event:FocusEvent<{}>) => {\r\n    event.preventDefault();\r\n    this.setState({hidden: false});\r\n  }\r\n\r\n  handleClickOutside = () => {\r\n    this.setState({hidden: true});\r\n  }\r\n\r\n  closeInput = () => {\r\n    this.setState({hidden: true});\r\n    this.refs[this.props.name].blur();\r\n  }\r\n\r\n  render() {\r\n    const dateRangeClasses = classnames({hidden: this.state.hidden}, 'date-range-container');\r\n\r\n    return (\r\n      <div className=\"date-range-wrapper\">\r\n        <InputWrapper className=\"input date-picker\" name={this.props.name} labelPostfix={this.props.labelPostfix} label={this.props.label}>\r\n          <InputGroup prepend={this.props.prepend} append={this.props.append}>\r\n            <input onFocus={this.handleFocus} placeholder={this.props.placeholder} value={this.props.valueString} ref={this.props.name} readOnly={true}/>\r\n          </InputGroup>\r\n        </InputWrapper>\r\n        <div className={dateRangeClasses}>\r\n          {React.cloneElement(this.props.children, {\r\n            close: this.closeInput\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default onReactOutsideClick<any>(DateWrapper)\r\nexport {DateWrapper};\n\n\n// WEBPACK FOOTER //\n// src/DatePicker/DateWrapper.tsx","import {is, Iterable} from \"immutable\";\r\nimport {isArray, isObject, isNaN, isFunction} from \"lodash\";\r\nimport { ShallowCompareProps, ShallowCompare } from \"../../../libs/types\";\r\n\r\nexport default (...keysToTest: string[]) : Function => {\r\n  /**\r\n   * Creates a function that checks to see if the passed in properties are equal\r\n   * {string} ...keysToTest - Properties to check if equal\r\n   */\r\n  return (props: ShallowCompareProps, nextProps: ShallowCompareProps) : boolean => {\r\n    return keysToTest.every((value:string) => {\r\n      const currentVal:ShallowCompare = props[value];\r\n      const nextVal:ShallowCompare = nextProps[value];\r\n      if (Iterable.isIterable(currentVal) || Iterable.isIterable(nextVal)) {\r\n        return is(currentVal, nextVal);\r\n      } else {\r\n        if (nextVal !== null && nextVal !== undefined) {\r\n          if ((isArray(nextVal) || (Object.keys(nextVal).length > 0 && isObject(nextVal)) || isNaN(nextVal)) && !isFunction(nextVal)) {\r\n            throw new Error(`Specific shallow equal does not support plain old JS objects, Arrays and NaN: prop ${nextVal} is a ${typeof nextVal}`);\r\n          }\r\n        }\r\n        return currentVal === nextVal;\r\n      }\r\n    })\r\n  }\r\n};\n\n\n// WEBPACK FOOTER //\n// src/Form/Helpers/createSpecificShallowEqual.ts","/** Libraries */\r\nimport React from 'react';\r\nimport classnames from 'classnames';\r\nimport {snakeCase, toLower} from 'lodash';\r\n\r\n/** Components */\r\nimport SwitchBase from './Base';\r\nimport DisplayValidation from '../Validation/DisplayValidation';\r\nimport ErrorWrapper from '../Form/ErrorWrapper';\r\nimport performanceWrapper from '../Form/Helpers/performanceWrapper';\r\n\r\n/** Interfaces */\r\nimport {SwitchProps, PerformanceWrapperProps} from '../../typings/types.d';\r\n\r\n/** Styles */\r\nimport \"./Switch.scss\";\r\n\r\n/** Class Switch */\r\nexport class Switch extends React.Component<SwitchProps & PerformanceWrapperProps, {}>{\r\n  render() {\r\n    const {className, label, style, ...props} = this.props;\r\n    const {autoFocus, onChange, onBlur, id, defaultChecked, defaultSelected, defaultValue, value, ...validationProps} = props;\r\n\r\n    const classes = classnames(\"switch\", className);\r\n     \r\n    return (\r\n      <ErrorWrapper className={classes} type={props.type} style={style}>\r\n        <SwitchBase {...props} id={id || this.props.name}/>\r\n        <label htmlFor={id || this.props.name}>\r\n          <span className=\"box\"/>\r\n          {label}\r\n        </label>\r\n        <DisplayValidation {...validationProps} />\r\n      </ErrorWrapper>\r\n    );\r\n  }\r\n};\r\n\r\nexport default performanceWrapper<SwitchProps>(Switch);\n\n\n// WEBPACK FOOTER //\n// src/Switch/Switch.tsx","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/DatePicker/DateRange.scss\n// module id = 22\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_23__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"moment\",\"commonjs2\":\"moment\",\"amd\":\"moment\",\"root\":\"Moment\"}\n// module id = 23\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_24__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"react-date-range\",\"commonjs2\":\"react-date-range\",\"amd\":\"react-date-range\",\"root\":\"ReactDateRange\"}\n// module id = 24\n// module chunks = 0","/** Libraries */\r\nimport React from 'react';\r\nimport classnames from 'classnames';\r\n\r\n/** Components */\r\nimport Switch from '../Switch/Switch';\r\n\r\n/** Types */\r\nimport {SwitchProps} from '../../typings/types.d';\r\n\r\n/** \r\n * Class CheckBox\r\n * Creates a Checkbox connected to forms state management.\r\n * All HTML5 attributes apply.\r\n */\r\nclass CheckBox extends React.Component<SwitchProps, {}> {\r\n  render() {\r\n    const {className, ...other} = this.props;\r\n    var classes:string = classnames(className, 'checkbox');\r\n\r\n    return (\r\n      <Switch className={classes} {...other} type=\"checkbox\"/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CheckBox;\n\n\n// WEBPACK FOOTER //\n// src/CheckBox/CheckBox.tsx","/** Libraries */\r\nimport React from 'react';\r\nimport moment, {Moment} from 'moment';\r\nimport {compose, defaultProps} from 'recompose';\r\nimport {Calendar} from 'react-date-range';\r\n\r\n/** Components */\r\nimport DateWrapper from './DateWrapper';\r\nimport performanceWrapper from '../Form/Helpers/performanceWrapper';\r\n\r\n/** Interfaces */\r\nimport {DateWrapperPassedDownProps} from './DateWrapper';\r\nimport {DatePickerProps, PerformanceWrapperProps} from '../../typings/types.d';\r\n\r\n/** Styles */\r\nimport './DateRange.scss';\r\n\r\n/** Class CalendarBase */\r\nclass CalendarBase extends React.Component<DatePickerProps & PerformanceWrapperProps & DateWrapperPassedDownProps, {}>{\r\n  handleChange = (dateRange:Moment) => {\r\n    const {inputChanged, close} = this.props;\r\n    inputChanged(dateRange.format(this.props.serverFormat));\r\n    if(typeof close === 'function'){\r\n      close();\r\n    }\r\n    if(typeof this.props.onChange === 'function'){\r\n      this.props.onChange(dateRange);\r\n    }\r\n  }\r\n  render() {\r\n    return <Calendar {...this.props} onChange={this.handleChange}/>\r\n  }\r\n}\r\n\r\n/** Class DatePicker */\r\nclass DatePicker extends React.Component<DatePickerProps & PerformanceWrapperProps, {}>{\r\n  getValue = () => {\r\n    const {value, defaultValue, dateFormat} = this.props;\r\n    const parsedValue = moment(value || defaultValue);\r\n\r\n    if(parsedValue.isValid()) {\r\n      return parsedValue.format(dateFormat);\r\n    } else {\r\n      return value || defaultValue || \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {children, ...props} = this.props\r\n    return (\r\n      <DateWrapper {...props} valueString={this.getValue()}>\r\n        <CalendarBase {...this.props}/>\r\n      </DateWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose<DatePickerProps & PerformanceWrapperProps, DatePickerProps>(\r\n  defaultProps({\r\n    defaultValue: moment().format(),\r\n    dateFormat: 'DD/MM/YYYY',\r\n    serverFormat: null\r\n  }),\r\n  performanceWrapper\r\n)(DatePicker);\r\n\r\nexport {DatePicker, CalendarBase};\n\n\n// WEBPACK FOOTER //\n// src/DatePicker/DatePicker.tsx","/** Libraries */\r\nimport React from 'react';\r\nimport moment, {Moment} from 'moment';\r\nimport {compose} from 'recompose';\r\nimport {Map} from 'immutable';\r\nimport {isFunction} from 'lodash';\r\nimport {DateRange} from 'react-date-range';\r\n\r\n/** Components */\r\nimport DateWrapper from './DateWrapper';\r\nimport performanceWrapper from '../Form/Helpers/performanceWrapper';\r\n\r\n/** Interfaces */\r\nimport {DateRangeMap, DateRangeMoment, DateRangeProps, PerformanceWrapperProps} from '../../typings/types.d';\r\n\r\n/** Helpers */\r\nconst getValue = (dateRange?: DateRangeMap, dateFormat:string = 'DD/MM/YYYY') => {\r\n  if (Map.isMap(dateRange) && dateRange) {\r\n    return moment(dateRange.get('startDate'), 'DD/MM/YYYY').format(dateFormat) + \" to \" + moment(dateRange.get('endDate'), 'DD/MM/YYYY').format(dateFormat);\r\n  }\r\n  return moment().format(dateFormat) + \" to \" + moment().format(dateFormat);\r\n}\r\n\r\n/** Styles */\r\nimport './DateRange.scss';\r\n\r\n/** Class DateRangeBase */\r\nclass DateRangeBase extends React.Component<DateRangeProps & PerformanceWrapperProps, {}>{\r\n  handleChange = (dateRange: DateRangeMoment) => {\r\n    this.props.inputChanged(Map<string, Moment>({\r\n      startDate: dateRange.startDate.format('DD/MM/YYYY'),\r\n      endDate: dateRange.endDate.format('DD/MM/YYYY')\r\n    }));\r\n    if(typeof this.props.onChange === 'function'){\r\n      this.props.onChange(dateRange);\r\n    }\r\n  }\r\n  render(){\r\n    return <DateRange {...this.props} calendars={1} onChange={this.handleChange}/>\r\n  }\r\n};\r\n\r\n/** Class DateRangePicker */\r\nclass DateRangePicker extends React.Component<DateRangeProps & PerformanceWrapperProps, undefined> {\r\n  render() {\r\n    const {children, ...props} = this.props;\r\n\r\n    return (\r\n      <DateWrapper {...props} valueString={getValue(props.value, props.dateFormat)}>\r\n        <DateRangeBase {...props}/>\r\n      </DateWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default performanceWrapper<DateRangeProps>(DateRangePicker);\r\nexport {DateRangeBase, DateRangePicker}\n\n\n// WEBPACK FOOTER //\n// src/DatePicker/DateRange.tsx","/** Libraries */\r\nimport React, {Children} from 'react';\r\nimport {Set} from 'immutable';\r\nimport ReactDropZone from 'react-dropzone';\r\nimport classnames from 'classnames';\r\nimport {compose} from 'recompose';\r\nimport {isFunction} from 'lodash';\r\n\r\n/** * Components */\r\nimport performanceWrapper from '../Form/Helpers/performanceWrapper';\r\nimport {getHTMLAttributes} from '../Form/Helpers/inputHelpers';\r\nimport {DropZoneProps, PerformanceWrapperProps} from '../../typings/types.d';\r\n\r\n/** Styles */\r\nimport './DropZone.scss';\r\n\r\n/** Helpers */\r\nconst isFileArray = (files) => {\r\n  return Set.isSet(files) && files.size > 1;\r\n};\r\n\r\nconst isSingleFile = (files) => {\r\n  return Set.isSet(files) && files.size === 1;\r\n};\r\n\r\nconst PassDownProps = (props, children) => {\r\n  if (children.type === 'span' || children.type === 'div') {\r\n    return React.cloneElement(children);\r\n  } else {\r\n    return React.cloneElement(children, {\r\n      ...props\r\n    });\r\n  }\r\n};\r\n\r\n/** Class DropZone */\r\nclass DropZone extends React.Component<DropZoneProps & PerformanceWrapperProps, undefined> {\r\n  static defaultProps = {\r\n    children: <noscript />\r\n  }\r\n\r\n  componentDidMount() {\r\n    const files = this.getFiles();\r\n\r\n    if(files.size > 0) {\r\n      this.props.inputChanged(this.getFiles(), false);\r\n    }\r\n  }\r\n\r\n  getFiles = (): Set<any> => {\r\n    const {value} = this.props;\r\n\r\n    if(isFileArray(value)) {\r\n      return Set(value);\r\n    } else if(isSingleFile(value)) {\r\n      return Set([value.first()]);\r\n    }\r\n    return Set();\r\n  }\r\n  \r\n  onDrop = (files) => {\r\n    const {multiple = false, inputChanged, onDrop} = this.props;\r\n    if(multiple) {\r\n      const allFiles = this.getFiles().concat(files) as Set<File>;\r\n      inputChanged(allFiles);\r\n\r\n      if(isFunction(onDrop)) {\r\n        onDrop(allFiles);\r\n      }\r\n    } else {\r\n      inputChanged(Set([files]));\r\n      \r\n      if(isFunction(onDrop)) {\r\n        onDrop(files);\r\n      }\r\n    }\r\n  }\r\n\r\n  deleteFile = (index) => {\r\n    const {multiple = false, inputChanged} = this.props;\r\n    const stateFiles = this.getFiles();\r\n    \r\n    inputChanged(stateFiles.delete(index));\r\n  }\r\n  \r\n  render() {\r\n    const {children, className, placeholder = \"Drop here\", multiple = false, showList = true, fileListComponent} = this.props;\r\n    const attributes = getHTMLAttributes(this.props);\r\n\r\n    const files = this.getFiles();\r\n    const classes = classnames(\"drop-zone-box\", className);\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"drop-zone\">\r\n          <ReactDropZone className={classes} onDrop={this.onDrop} multiple={multiple} {...attributes}>\r\n            {isFunction(children) ? (\r\n              children(this.getFiles(), this.deleteFile)\r\n            ) : (\r\n              <div>\r\n                {children && PassDownProps({files}, children)}\r\n              </div>\r\n            )}\r\n          </ReactDropZone>\r\n        </div>\r\n\r\n        {isFunction(fileListComponent) && (\r\n          fileListComponent(this.getFiles(), this.deleteFile)\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default performanceWrapper(DropZone);\r\nexport {DropZone};\n\n\n// WEBPACK FOOTER //\n// src/DropZone/DropZone.tsx","/** Libraries */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withContext} from 'recompose';\r\n\r\n/** Interfaces */\r\nimport {FieldSetProps, FormContext} from '../../typings/types.d';\r\n\r\n/** Class Fieldset */\r\nclass Fieldset extends React.Component<FieldSetProps, undefined> {\r\n  render() {\r\n    const {children, ...props} = this.props;\r\n\r\n    return (\r\n      <fieldset {...props}>{children}</fieldset>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withContext<FormContext, FieldSetProps>({\r\n  fieldSetNameSpace: PropTypes.string\r\n}, ({name, id} : FieldSetProps) => ({\r\n  fieldSetNameSpace: id ? `${name}/${id}` : name\r\n}))(Fieldset);\n\n\n// WEBPACK FOOTER //\n// src/Form/Fieldset.tsx","/** Libraries */\r\nimport React, {FormEvent} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {is, List, Map, Iterable} from 'immutable';\r\nimport classnames from 'classnames';\r\nimport {defer, isFunction} from 'lodash';\r\nimport {withReducer, compose, branch, ComponentEnhancer} from 'recompose';\r\n\r\n/** Helpers */\r\nimport {setAllInputInteractions, clearAllInputs} from './Actions/fields';\r\nimport {withReducerState} from './Reducers';\r\nimport {convertToFormData, normalizeFields} from './Helpers/formHelpers';\r\n\r\nconst mapOutput = (data: Map<string, any>, mapOutputFunc: ((data?: Map<string, any>) => Map<string, any>)) => {\r\n  if (isFunction(mapOutputFunc)){\r\n    const mappedData = mapOutputFunc(data)\r\n    if(!Iterable.isIterable(mappedData)){\r\n      throw new Error(\"mapOutput must return an Immutable Iterable\");\r\n    }\r\n    return mappedData;\r\n  } else {\r\n    return data;\r\n  }\r\n}\r\n\r\nconst randomString = (length) => Math.random().toString(36).substring(length);\r\n\r\n/** Interfaces */\r\nimport {BaseReactProps, PossibleInputValue, OnSubmit, formState,\r\n        FormOptionalProps, FormOwnProps, FormStateProps,\r\n        FormDispatchProps, FormState, FormProps} from '../../typings/types.d';\r\n\r\ninterface FormInnerProps<T> extends FormOwnProps<T>, FormStateProps, FormDispatchProps {\r\n  FormState: formState,\r\n  dispatch: any,\r\n  mapOutput: (data?: Map<string, any>) => Map<string, any>\r\n  onInvalid?: () => void\r\n}\r\n\r\n/** Displays a form component, inserts all user input into redux state and ensures that all inputs are validated\r\n * before allowing the user to submit the form. */\r\nclass Form extends React.Component<FormInnerProps<undefined>, FormState>{\r\n\r\n  public static childContextTypes = {\r\n    FormState: PropTypes.object,\r\n    nameSpace: PropTypes.string,\r\n    dispatch: PropTypes.func\r\n  }\r\n\r\n  private lastSumbittedString:string = null\r\n\r\n  //FIXME: any to make TS happy unsure why it needs to be this way\r\n  public static defaultProps:any = {\r\n    encType: 'application/json',\r\n    mapOutput: (data:Map<string, any>) => data\r\n  }\r\n\r\n  refs: {\r\n    [name: string]: Element\r\n  }\r\n\r\n  constructor(props:FormInnerProps<undefined>){\r\n    super(props);\r\n    this.state = {\r\n      canSubmitString: randomString(10)\r\n    }\r\n  }\r\n\r\n  getChildContext(){\r\n    return {\r\n      FormState: this.props.FormState,\r\n      nameSpace: this.props.name,\r\n      dispatch: this.props.dispatch\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps:FormProps<undefined>){\r\n    if (this.props.name !== nextProps.name) {\r\n      this.props.dispatch(clearAllInputs(nextProps.name));\r\n      // make the new form unsubmit-able\r\n      this.setState({\r\n        canSubmitString: randomString(10)\r\n      });\r\n    } else {\r\n      this.setState({\r\n        canSubmitString: randomString(10)\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    this.props.dispatch(clearAllInputs(this.props.name));\r\n  }\r\n\r\n  handleFormSubmit = (event:FormEvent<{}>) => {\r\n    event.preventDefault();\r\n\r\n    if(this.state.canSubmitString !== this.lastSumbittedString) {\r\n      const {dispatch, onSubmit, FormState, name, encType, onInvalid} = this.props;\r\n\r\n      // INSERT COMMENT HERE\r\n      dispatch(setAllInputInteractions(name, \"changed\", true));\r\n\r\n      // INSERT COMMENT HERE\r\n      defer(() => {\r\n        const form = this.refs[name];\r\n        const firstError = form.querySelector('.invalid');\r\n\r\n        if(firstError === null) {\r\n          if(onSubmit) {\r\n            const fields = FormState.get(name);\r\n            const normalizedFields = mapOutput(normalizeFields(fields) as Map<string, any>, this.props.mapOutput);\r\n\r\n            if(encType === \"multipart/form-data\") {\r\n              onSubmit(event, convertToFormData(normalizedFields));\r\n            } else {\r\n              onSubmit(event, normalizedFields);\r\n            }\r\n\r\n            // update state so users cannot submit again\r\n            this.lastSumbittedString = this.state.canSubmitString\r\n          }\r\n        } else {\r\n          const scrollTo = firstError.getBoundingClientRect().top - 50;\r\n          if(typeof window === 'object' && scrollTo < 0) {\r\n            window.scrollTo(0, document.body.scrollTop + scrollTo - 5);\r\n          }\r\n          if (onInvalid) {\r\n            onInvalid();\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const {FormState, dispatch, onSubmit, className, name, encType, ...safeProps} = this.props;\r\n    const classes = classnames('form', className);\r\n    return (\r\n      <form name={name} ref={name} onSubmit={this.handleFormSubmit} className={classes} noValidate encType={encType}>\r\n        {this.props.children}\r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nexport default branch<FormProps<undefined>>(props => {\r\n    return !(props.FormState && props.dispatch)\r\n  }, withReducer(\"FormState\", \"dispatch\", withReducerState, Map<string, {}>()) as any) //\"any\" is a short term fix till recompose types are updated\r\n(Form);\r\n\r\n\r\nexport {clearAllInputs}\n\n\n// WEBPACK FOOTER //\n// src/Form/Form.tsx","/** Libraries */\r\nimport React from 'react';\r\n\r\n/** Components */\r\nimport Input from '../Input/Input';\r\n\r\n/** Interfaces */\r\nimport {TextInputProps} from '../../typings/types.d';\r\n\r\nclass Number extends React.Component<TextInputProps, {}> {\r\n  static defaultProps = {\r\n    pattern: '[0-9]+.?[0-9]*',\r\n    type: 'number',\r\n  }\r\n\r\n  render() {\r\n    return <Input {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default Number;\n\n\n// WEBPACK FOOTER //\n// src/Number/Number.tsx","/** Libraries */\r\nimport React from 'react';\r\nimport classnames from 'classnames';\r\nimport {compose} from 'recompose';\r\nimport {isFunction} from 'lodash';\r\n\r\n/** Components */\r\nimport Radio from '../Radio/Radio';\r\nimport {RadioTabsPassedDownProps} from './RadioTabs';\r\n\r\n/** Interfaces */\r\nimport {RadioTabProps} from '../../typings/types.d';\r\n\r\nclass RadioTab extends React.Component<RadioTabsPassedDownProps & RadioTabProps, {}> {\r\n  componentWillMount(){\r\n    if(this.props.defaultSelected){\r\n      this.setId(this.props.id);\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps: RadioTabsPassedDownProps & RadioTabProps){\r\n    if(this.props.defaultSelected !== nextProps.defaultSelected){\r\n      this.setId(nextProps.id);\r\n    }\r\n  }\r\n\r\n  setId = (id:string) => {\r\n    const {setId} = this.props;\r\n    if(!setId) throw new Error(`setId is not pass down from RadioTabs. please check RadioTab - ${id} is direct child of RadioTabs or create the wrapper to pass the props from RadioTabs`);\r\n    if(setId && isFunction(setId)) setId(id);\r\n  }\r\n\r\n  onClick = () => {\r\n    const {id} = this.props;\r\n    this.setId(id);\r\n  }\r\n\r\n  render() {\r\n    const {className, children, chosenId, ...props} = this.props;\r\n    var classes = classnames(className, 'radio-tab', {active: chosenId === props.id});\r\n    \r\n    return (\r\n      <div className={classes} onClick={this.onClick}>\r\n        <Radio {...props}/>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// This is a hack to ensure that proper types are passed down. Need a better way to type React.cloneElement\r\nexport default compose<RadioTabsPassedDownProps & RadioTabProps, RadioTabProps>((radioTab) => radioTab)(RadioTab);\n\n\n// WEBPACK FOOTER //\n// src/Radio/RadioTab.tsx","/** Libraries */\r\nimport React from 'react';\r\nimport classnames from 'classnames';\r\n\r\n/** Components */\r\nimport InputWrapper from '../Form/InputWrapper';\r\n\r\n/** Interfaces */\r\nimport {RadioTabsProps, RadioTabProps, SwitchProps} from '../../typings/types.d';\r\n\r\n/** Styles */\r\nimport './RadioTabs.scss';\r\n\r\nexport interface RadioTabsPassedDownProps {\r\n  name: string,\r\n  chosenId: string,\r\n  setId: (chosenId: string) => undefined\r\n}\r\n\r\ninterface RadioTabsStateProps {\r\n  chosenId: string\r\n}\r\n\r\ninterface RadioTabsInnerProps extends RadioTabsProps{\r\n  children: React.ReactElement<RadioTabProps>\r\n}\r\n\r\n/** Class RadioTabs */\r\nclass RadioTabs extends React.Component<RadioTabsProps, RadioTabsStateProps> {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      chosenId: \"\"\r\n    }\r\n  }\r\n\r\n  setId = (chosenId) => {\r\n    this.setState({\r\n      chosenId\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {className, radioClasses = undefined, name, label, children} = this.props;\r\n    const {chosenId} = this.state;\r\n    var classes: string = classnames(className, 'input', 'radio-tabs');\r\n\r\n    // Deprecation warning, v1.0.x\r\n    if(radioClasses != undefined) {\r\n      throw new Error(\"radioClasses prop has been replaced with className\");\r\n    }\r\n\r\n    return (\r\n      <InputWrapper className={classes} name={name} label={label}>\r\n        {React.Children.map(children, (child:React.ReactElement<any>) => {\r\n          {/*\r\n          ATTN SHANE: Your hack doesn't work. Fix it!\r\n          if(typeof child.type === 'string' || child.type.name !== 'RadioTab') {\r\n            console.warn(\"RadioTabs can only accept RadioTab components as childen\", \"Element is \" + child);\r\n          }  */}\r\n\r\n          return React.cloneElement(child as React.ReactElement<RadioTabsPassedDownProps>, {\r\n            name,\r\n            chosenId,\r\n            setId: this.setId\r\n          })\r\n        })}\r\n      </InputWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RadioTabs;\n\n\n// WEBPACK FOOTER //\n// src/Radio/RadioTabs.tsx","/** Libraries */\r\nimport React from 'react';\r\nimport classnames from 'classnames';\r\n\r\n/** Components */\r\nimport InputWrapper from '../Form/InputWrapper';\r\nimport performanceWrapper from '../Form/Helpers/performanceWrapper';\r\nimport DisplayValidation from '../Validation/DisplayValidation';\r\nimport SelectBase from './Base';\r\nimport {SelectInputProps, PerformanceWrapperProps} from '../../typings/types.d';\r\n\r\n/** Styles */\r\nimport './Select.scss';\r\n\r\n/** Class Select */\r\nclass Select extends React.Component<SelectInputProps & PerformanceWrapperProps, {}> {\r\n  render() {\r\n    const {className, label, labelPostfix, labelPrefix, arrow, ...props} = this.props;\r\n    const {autoFocus, onChange, onBlur, id, defaultChecked, defaultSelected, value, children, ...validationProps} = props;\r\n    const classes = classnames(className, \"select\", \"input\");\r\n    return (\r\n      <InputWrapper className={classes} name={props.name} labelPrefix={labelPrefix} labelPostfix={labelPostfix} label={label}>\r\n        <div className=\"input-group\">\r\n          <div className=\"styled-select\">\r\n            <SelectBase {...props}/>\r\n            <div className=\"arrow\">{arrow}</div>\r\n          </div>\r\n        </div>\r\n        <DisplayValidation {...validationProps}/>\r\n      </InputWrapper>\r\n    );\r\n  }  \r\n};\r\n\r\nexport default performanceWrapper<SelectInputProps>(Select);\n\n\n// WEBPACK FOOTER //\n// src/Select/Select.tsx","/** Libraries */\r\nimport React from 'react';\r\nimport classnames from 'classnames';\r\n\r\n/** Components */\r\nimport InputWrapper from '../Form/InputWrapper';\r\nimport InputGroup from '../Form/InputGroup';\r\nimport TextAreaBase from './Base';\r\nimport DisplayValidation from '../Validation/DisplayValidation';\r\nimport performanceWrapper from '../Form/Helpers/performanceWrapper';\r\n\r\n/** Interfaces */\r\nimport {TextAreaProps, PerformanceWrapperProps} from '../../typings/types.d';\r\n\r\n/** Class TextArea */\r\nexport class TextArea extends React.Component<TextAreaProps & PerformanceWrapperProps, {}> {\r\n  render() {\r\n    const {className, label, labelPrefix, labelPostfix, ...props} = this.props;\r\n    const {autoFocus, onChange, onBlur, id, value, ...validationProps} = props;\r\n    const classes = classnames(className, 'textarea', 'input');\r\n    \r\n    return (\r\n      <InputWrapper className={classes} name={props.name} labelPrefix={labelPrefix} labelPostfix={labelPostfix} label={label}>\r\n        <InputGroup>\r\n          <TextAreaBase {...props} />\r\n        </InputGroup>\r\n        <DisplayValidation {...validationProps} />\r\n      </InputWrapper>\r\n    );\r\n  } \r\n};\r\n\r\nexport default performanceWrapper<TextAreaProps>(TextArea);\n\n\n// WEBPACK FOOTER //\n// src/TextArea/TextArea.tsx","/** Libraries */\r\nimport React from 'react';\r\n\r\n/** Components */\r\nimport {validationPerformanceWrapper} from '../Form/Helpers/performanceWrapper';\r\nimport DisplayValidation from './DisplayValidation';\r\n\r\n/** Interfaces */\r\nimport {PerformanceWrapperProps, ValidateProps} from '../../typings/types.d';\r\n\r\n/**\r\n * Class Validate\r\n * \r\n * A component to allow validation anywhere inside of a form component\r\n * for input elements in that same component\r\n */\r\nclass Validate extends React.Component<ValidateProps & PerformanceWrapperProps, {}> {\r\n  render() {\r\n    return <DisplayValidation {...this.props}/>;\r\n  }\r\n}\r\n\r\nexport default validationPerformanceWrapper<ValidateProps>(Validate);\n\n\n// WEBPACK FOOTER //\n// src/Validation/Validate.tsx","export {default as CheckBox} from \"../src/CheckBox/CheckBox\";\r\nexport {default as DatePicker} from \"../src/DatePicker/DatePicker\";\r\nexport {default as DateRange} from \"../src/DatePicker/DateRange\";\r\nexport {default as DropZone} from \"../src/DropZone/DropZone\";\r\nexport {default as Input} from \"../src/Input/Input\";\r\nexport {default as Number} from \"../src/Number/Number\";\r\nexport {default as Radio} from \"../src/Radio/Radio\";\r\nexport {default as RadioTabs} from \"../src/Radio/RadioTabs\";\r\nexport {default as RadioTab} from \"../src/Radio/RadioTab\";\r\nexport {default as Select} from \"../src/Select/Select\";\r\nexport {default as TextArea} from \"../src/TextArea/TextArea\";\r\nexport {default as Validation} from \"../src/Validation/Validation\";\r\nexport {default as Validate} from \"../src/Validation/Validate\";\r\nexport {default as Form} from \"../src/Form/Form\";\r\nexport {FormOwnProps, FormOptionalProps} from '../index.d';\r\nexport {basicReducer as ReduxReducer} from \"../src/Form/Reducers/index\";\r\nexport {default as performanceWrapper} from \"../src/Form/Helpers/performanceWrapper\";\r\nexport {default as Fieldset} from \"../src/Form/Fieldset\";\r\nexport {default as InputGroup} from \"../src/Form/InputGroup\";\r\nexport {default as InputWrapper} from \"../src/Form/InputWrapper\";\r\nexport {default as ErrorWrapper} from \"../src/Form/ErrorWrapper\";\r\nexport {default as DisplayValidation} from \"../src/Validation/DisplayValidation\";\r\nexport {convertToFormData} from \"../src/Form/Helpers/formHelpers\";\r\nexport {validationsAvailable} from \"../libs/validate\";\r\nexport {clearAllInputs} from \"../src/Form/Actions/fields\";\n\n\n// WEBPACK FOOTER //\n// app/index.ts","interface Validations {\r\n  email: string,\r\n  number: string\r\n}\r\n\r\nconst validations:Validations = {\r\n  'email': '([\\\\w-\\\\.]+)@((?:[\\\\w]+\\\\.)+)([a-zA-Z]{2,24})$',\r\n  'number': '^[0-9]+.?[0-9]*$'\r\n}\r\n\r\nexport default validations;\n\n\n// WEBPACK FOOTER //\n// libs/validationRegExps.ts","import {List} from 'immutable';\r\n\r\nexport function getInputValue(nameSpace: string, inputName: Array<string>) {\r\n  return List([nameSpace, ...inputName, 'value']);\r\n}\r\n\r\nexport function getInputValidation(nameSpace: string, inputName: Array<string>) {\r\n  return List([nameSpace, ...inputName]);\r\n}\r\n\r\nexport function getInputState(nameSpace: string, inputName: Array<string>, state: string) {\r\n  return List([nameSpace, ...inputName, state]);\r\n}\n\n\n// WEBPACK FOOTER //\n// src/Form/Helpers/path.ts","/** Libraries */\r\nimport React, {ChangeEvent, FocusEvent} from 'react';\r\nimport {isFunction} from 'lodash';\r\n\r\n/** Helpers */\r\nimport {getHTMLAttributes} from '../Form/Helpers/inputHelpers';\r\n\r\n/** Interfaces */\r\nimport {TextInputProps, PerformanceWrapperProps} from \"../../typings/types.d\";\r\n\r\n/** Class InputBase */\r\nclass InputBase extends React.Component<TextInputProps & PerformanceWrapperProps, {}>{\r\n  displayName: 'InputBase'\r\n\r\n  handleChange = (event:ChangeEvent<{files?: FileList, value?: any}>) => {\r\n    const value:string = this.props.type === 'file' ? event.target.files : event.target.value;\r\n    this.props.inputChanged(value);\r\n    if (isFunction(this.props.onChange)) {\r\n      this.props.onChange(event);\r\n    }\r\n  }\r\n\r\n  handleBlured = (event:FocusEvent<{}>) => {\r\n    this.props.setInputBlurred()\r\n    if(isFunction(this.props.onBlur)){\r\n      this.props.onBlur(event);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const attributes = getHTMLAttributes<TextInputProps & PerformanceWrapperProps>(this.props);\r\n    return <input onBlur={this.handleBlured} {...attributes} onChange={this.handleChange}/>\r\n  }\r\n}\r\n\r\nexport default InputBase;\n\n\n// WEBPACK FOOTER //\n// src/Input/Base.tsx","/** Libraries */\r\nimport React, {Children, ChangeEvent, FocusEvent} from 'react';\r\nimport {withProps} from 'recompose';\r\nimport {List} from 'immutable';\r\n\r\n/** Components */\r\nimport {getHTMLAttributes} from '../Form/Helpers/inputHelpers';\r\nimport {SelectInputProps, PerformanceWrapperProps} from '../../typings/types.d';\r\n\r\n/** Interfaces */\r\ninterface WithProps extends SelectInputProps {\r\n  defaultSelected?: string | boolean | number\r\n}\r\n\r\n/** Helpers */\r\nconst getDefaultSelected = ({children, defaultValue}: SelectInputProps) => {\r\n  if (Children.count(children) < 1) {\r\n    return '';\r\n  } else if (defaultValue) {\r\n    return defaultValue;\r\n  } else {\r\n    return (Children.toArray(children)[0] as any).props.value;\r\n  }\r\n};\r\n\r\n/** Class SelectBase */\r\nclass SelectBase extends React.Component<SelectInputProps & PerformanceWrapperProps, {}> {\r\n  /*displayName: 'SelectBase'*/\r\n  \r\n  handleChange = (event: ChangeEvent<{value:any}>) => {\r\n    const {inputChanged, onChange} = this.props;\r\n    inputChanged(event.target.value);\r\n    if (typeof onChange === 'function') {\r\n      onChange(event);\r\n    }\r\n  }\r\n\r\n  handleBlur = (event: FocusEvent<{}>) => {\r\n    const {onBlur} = this.props;\r\n\r\n    if(typeof onBlur === 'function') {\r\n      onBlur(event);\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const attributes = getHTMLAttributes(this.props);\r\n    const {children} = this.props\r\n    return (\r\n      <select {...attributes} onBlur={this.handleBlur} onChange={this.handleChange}>\r\n        {children}\r\n      </select>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withProps<WithProps, SelectInputProps & PerformanceWrapperProps>(props => {\r\n  return {\r\n    defaultSelected: getDefaultSelected(props)\r\n  }\r\n})(SelectBase);\r\n\r\nexport {SelectBase};\n\n\n// WEBPACK FOOTER //\n// src/Select/Base.tsx","/** Libraries */\r\nimport React, {ChangeEvent, FocusEvent} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {snakeCase} from 'lodash';\r\n\r\n/** Helpers */\r\nimport {getHTMLAttributes} from '../Form/Helpers/inputHelpers';\r\n\r\nconst isChecked = (props: SwitchProps & PerformanceWrapperProps) => {\r\n  if (props.type === 'radio') {\r\n    return props.id + \"\" === props.value + \"\";\r\n  } else {\r\n    return !!props.value\r\n  }\r\n}\r\n\r\n/** Interfaces */\r\nimport {SwitchProps, PerformanceWrapperProps} from '../../typings/types.d';\r\n\r\ninterface SwitchBaseElement extends Element{\r\n  checked: boolean\r\n} \r\n\r\n/** {Internal} Method used internally to display a switch component(radio or checkbox)  */\r\nclass SwitchBase extends React.Component<SwitchProps & PerformanceWrapperProps, {}>{\r\n  displayName: 'SwitchBase'\r\n  \r\n  getChecked = (event: ChangeEvent<{checked?: boolean}>) => {\r\n    if (this.props.type === 'radio') {\r\n      return this.props.id;\r\n    } else {\r\n      return event.target.checked;\r\n    }\r\n  }\r\n  \r\n  handleChange = (event: ChangeEvent<{checked?: boolean}>) => {\r\n    const {inputChanged, onChange} = this.props;\r\n\r\n    inputChanged(this.getChecked(event));\r\n    if(typeof onChange === 'function') {\r\n      onChange(event);\r\n    }\r\n  }\r\n\r\n  handleBlur = (event: FocusEvent<{}>) => {\r\n    const {onBlur, setInputBlurred} = this.props;\r\n    \r\n    setInputBlurred();\r\n    if(typeof onBlur === 'function') {\r\n      onBlur(event);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var attributes = getHTMLAttributes(this.props);\r\n    return <input onBlur={this.handleBlur} onChange={this.handleChange} checked={isChecked(this.props)} ref={this.props.name} value={attributes.id} {...attributes} id={this.props.id}/>;\r\n  }\r\n};\r\n\r\nexport default SwitchBase;\n\n\n// WEBPACK FOOTER //\n// src/Switch/Base.tsx","/** Libraries */\r\nimport React, {Component, ChangeEvent, FocusEvent} from 'react';\r\n\r\n/** Helpers */\r\nimport {getHTMLAttributes} from '../Form/Helpers/inputHelpers';\r\n\r\n/** Interfaces */\r\nimport {TextAreaProps, PerformanceWrapperProps} from '../../typings/types.d';\r\n\r\n/** Class TextAreaBase */\r\nclass TextAreaBase extends Component<TextAreaProps & PerformanceWrapperProps, {}>{\r\n  displayName: 'TextAreaBase'\r\n\r\n  handleChange = (event:ChangeEvent<{value: string}>) => {\r\n    const {inputChanged, onChange} = this.props;\r\n  \r\n    inputChanged(event.target.value);\r\n    if(typeof onChange === 'function'){\r\n      onChange(event);\r\n    }\r\n  }\r\n\r\n  handleBlur = (event:FocusEvent<{}>) => {\r\n    const {setInputBlurred, onBlur} = this.props;\r\n\r\n    setInputBlurred();\r\n    if(typeof onBlur === 'function') {\r\n      onBlur(event);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var attributes = getHTMLAttributes<TextAreaProps & PerformanceWrapperProps>(this.props);\r\n    return <textarea onBlur={this.handleBlur} onChange={this.handleChange} {...attributes} />\r\n  }\r\n}\r\n\r\nexport default TextAreaBase;\n\n\n// WEBPACK FOOTER //\n// src/TextArea/Base.tsx","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/DropZone/DropZone.scss\n// module id = 44\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Form/InputGroup.scss\n// module id = 45\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Form/InputWrapper.scss\n// module id = 46\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Radio/RadioTabs.scss\n// module id = 47\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Select/Select.scss\n// module id = 48\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Switch/Switch.scss\n// module id = 49\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Validation/Validation.scss\n// module id = 50\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_51__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"react-dropzone\",\"commonjs2\":\"react-dropzone\",\"amd\":\"react-dropzone\",\"root\":\"ReactDropzone\"}\n// module id = 51\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_52__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"react-onclickoutside\",\"commonjs2\":\"react-onclickoutside\",\"amd\":\"react-onclickoutside\",\"root\":\"ReactOnclickoutside\"}\n// module id = 52\n// module chunks = 0"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;AChEA;;;;;;ACAA;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAOA;AACA;AAEA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAXA;AAeA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAKA;AAAA;AACA;AACA;AAAA;AAIA;AAIA;;;;;;;;ACpKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;;;;;;ACjDA;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;;AAiBA;AAhBA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAUA;AACA;AAAA;AAAA;;AAqCA;AApCA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAWA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AAKA;AACA;AAAA;AAAA;;AAcA;AAbA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAAA;AAEA;;;;;;;ACxBA;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAAA;;AAkBA;AAjBA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AAEA;AACA;AAKA;;;;AAIA;AACA;AAAA;AAAA;;AASA;AARA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAEA;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAgCA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7GA;AACA;AACA;AACA;AAEA;AACA;AACA;AAcA;AACA;AAAA;AAKA;AAAA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAjBA;AACA;AACA;;AACA;AAgBA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAIA;AACA;AAAA;AAAA;AAEA;AACA;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;;AAkBA;AAjBA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;;AAAA;AAEA;;;;;;;ACtCA;;;;;;ACAA;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AAKA;;;;AAIA;AACA;AAAA;AAAA;;AASA;AARA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AAHA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;;AAUA;AARA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AAHA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;;AAUA;AATA;AACA;AAEA;AAEA;AAGA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAaA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AA6BA;AAvEA;AACA;AAEA;AACA;AACA;AACA;AAsCA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAWA;AAKA;AA1EA;AACA;AACA;AAyEA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnHA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAAA;;AAQA;AAPA;AACA;AAEA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAcA;AACA;AACA;AAAA;AAoBA;AAAA;AAZA;AA6CA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA2CA;AACA;AACA;AACA;AAKA;AApGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAyFA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxJA;AACA;AAEA;AACA;AAKA;AAAA;AAAA;;AASA;AAHA;AACA;AACA;AAPA;AACA;AACA;AACA;AAKA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;;AAaA;AAlCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAgBA;AACA;AAAA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AATA;AACA;AACA;;AACA;AAQA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;;AAiBA;AAhBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAAA;;AAeA;AAdA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;AAAA;;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AAEA;AACA;AACA;AAKA;;;;;AAKA;AACA;AAAA;AAAA;;AAIA;AAHA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnBA;AACA;AACA;AACA;AAEA;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAMA;AAJA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AAGA;AACA;AAQA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAWA;AATA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAMA;AAJA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3DA;AACA;AAEA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAMA;AAJA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;ACrCA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;A","sourceRoot":""}